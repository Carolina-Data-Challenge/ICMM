# -*- coding: utf-8 -*-
"""Python_Problemset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DUcBvLxGKG1w0sRs0gbMyVbNVwJOTIdU

# Python Beginner Problem Set

Hello! This is a problem set aimed at beginners who want to learn a little Python and some basic applications to data science.

Things this problem set will go over


*   Printing out values
*   Variables and Data Types
*   Basic Functions
*   Basic Data Structures (Lists and Dictionaries)
*   For loops
*   Reading CSVs
*   Graphing with Matplotlib


This is by far not everything in Python. For those who already know Python, don't expect to learn too much if at all. Also note that while this problem set is designed for beginners, it is also made in a way that it still requires some googling to complete.

Before you do this problem set, please go over basic Python syntax.
https://www.w3schools.com/python/python_syntax.asp

## IMPORTANT: THIS COLAB FILE WILL NOT SAVE IN SANDBOX MODE, PLEASE SAVE A COPY OF THE COLAB TO SAVE

# Problem 1: Printing to Console

### Problem:

Print your 'Hello World' into the console
"""

# Your code below
print('Hello World')

"""### Hint

Look into the default Python functions for printing

https://www.learnpython.org/en/Hello,_World!

# Problem 2: Variables

### Problem:

Assign the a value to a variable below and then print it out
"""

# Your code here
a = 123

"""### Hint

Here's an example of assigning a number to a variable

```
exampleVariableName = 123
```

https://www.w3schools.com/python/python_variables.asp

# Problem 3: Data Types

### Problem

Create 4 values that would satisfy the following data types


1.   int
2.   float
3.   bool
4.   string
"""

# Assign your values to the respective variables

# This variable holds the int value
holdsInt = 3

# This variable holds the float value
holdsFloat = 3.4

# This variable holds the bool value
holdsBool = True

# This variable holds the String value
holdsString = "ddd"

print(type(holdsInt))
print(type(holdsFloat))
print(type(holdsBool))
print(type(holdsString))

"""### Hint

In Python, there are a few common data types:

1.    str: this type holds text like strings. For example 'hello world' is a string as notated by the '' surrounding the characters
2.    int: this type holds integers such as -1, 0, 1, 2, 3, 10, 9999, etc. Please note that ints do not have decimal places, there is another data type for that.
3.    float: this type also holds numbers, but in contrast to ints, it can hold values like 1.1, 10.004, -3.14, etc. These data types allow for floating point operations.
4.    bool: this type holds Boolean values such as True and False.

type() gives the type of the object passed into it

https://www.w3schools.com/python/python_datatypes.asp

# Problem 4: Functions

Python has a lot of built in functions that can help you do things without writing your own code. They are often called in the notation:
```
function(args)
```
You can also write your own functions with the def keyword.

### Problem:

Create and execute a function that appends 2 strings together and then prints it out
"""

# Your code here
def functionName(str1, str2):
  # function body goes here
  str = str1+str2
  print(str)

"""### Hint

Create Function like this

```
def functionName(args):
  # function body goes here
```

Execute the Function like this

```
functionName(args)
```
https://www.w3schools.com/python/python_lists.asp

# Problem 5: Creating Lists

### Problem:

Create a list that holds 2 strings, 1 bool, and a 3 floats
"""

# Your code here
ex_list = ["f", "fs", True, 2.4,4.5,3.33]

"""### Hint

Here is an example of a Python list holding 5 integers
```
[1,2,5,4,10]
```
https://www.w3schools.com/python/python_lists.asp

# Problem 6: Editing Lists

### Problem:

Edit the following list so that it only holds 10 strings (No ints allowed)
"""

# List to edit:
p6List = [1,2,'Bob', 274, 'John Doe', 'Carolina', 'Data', 'Challenge']

# Your code here
p6List = ["sss"]*10



print(p6List)

"""### Hint

You can use pop, remove, and del to remove objects from a list

You can use insert and append to add objects to a list

https://www.w3schools.com/python/python_lists.asp

# Problem 7: Sorting Lists

### Problem:

Sort the following list so that it is in order from greatest to least
"""

# List to sort
p7List = [1,4,2,67,123,65,1,345,8645,123,0]

# Your code here



print(p7List)

"""### Hint

For an easy way to sort a list, check out the documentation on lists in Python

https://www.w3schools.com/python/ref_list_sort.asp

# Problem 8: Creating Dicts

### Problem:

Make a dictionary with 5 key-value pairs. The keys must be animal names, and the values must be what color they are
"""

# Your code here

dict_ex = {"dog": "white", "cat": "black", "mouse": "gray", "rabbit": "white", "tiger": "brown"}

"""### Hint

Dicts generally look like this:
```
dict1 = {
  key1: value1,
  key2: value2,
  key3: value3, 
}
```

https://www.w3schools.com/python/python_dictionaries.asp

# Problem 9: Editing Dicts

### Problem:

Edit this dictionary by adding your name as a key and your favorite ice cream flavor as a value. Also, remove the 'KMP' key and value from the dictionary
"""

# Dict to edit
p8Dict = {
    'Rocky': 'Rocky Road',
    'Kevin': 'Mint Chocolate Chip',
    'Julia': 'Vanilla',
    'Sean': 'Strawberry',
    'KMP': 'Peach'
}

# Your code here
p8Dict["PM"] = "Chocolate"
del p8Dict['KMP']

"""### Hint

You can add a new key like this:
```
dict[new key] = new value
```

You can remove a key value pair like this:
```
del dict[key]
```
https://www.w3schools.com/python/python_dictionaries.asp

# Problem 10: For Loops

### Problem:

Write a for loop that prints out each and every value in the given list
"""

# List to print
p9List = ['Somebody', 'Once', 'Told', 'Me', 'The', 'World', 'Is', 'Gonna', 'Roll', 'Me']

# Your code here
for elt in p9List:
    print(elt)

"""### Hint

Loops generally look like this:
```
for value in iterable:
  # loop body
```

iterable refers to the data structure (list, dict, etc.) that the loop is iterating over

value holds the current value of the iterable as the loop traverses over it

https://www.learnpython.org/en/Loops

# Problem 11: Conditionals

### Problem:

Write a conditional in the loop so that only negative numbers are printed into the console
"""

p9List = [-1, -2.642, 3, 10, 200, -999]

for number in p9List:
  # Write your conditional here
  if number < 0:
    print(number)

"""### Hint

Conditionals generally look like this

```
if booleanExpression1:
  # conditional body 1
elif booleanExpression2:
  # conditional body 2
else:
  # conditional body 3
```

Boolean expressions are anything that evaluate to a boolean value (True/False). You can use logical operators like ==, !=, and 'in', to test values. You can use parenthesis, 'and', and 'or' operators to create complex expressions.

https://medium.com/swlh/understanding-basic-decision-structures-in-python-24dd04f28717

# Problem 12: 2D Arrays

### Problem:

Use for loops to create a 20 by 20 2D array filled with values increasing from 0 to 399. The top left corner holds the number 0, the bottom right holds the number 399.



```
# This is a 2d array:
array2d = [
  [1,2,3,4],
  [1,2,3,4],
  [1,2,3,4],
  [1,2,3,4]
]
```
"""

# Your code here
array = [[0 for _ in range(20)] for _ in range(20)]
for i in range(20):
    for j in range(20):
        array[i][j] = i*20+j

"""### Hint

You can nest for loops inside for loops to automatically fill the array

```
for innerList in outerList:
  # Outer loop body
  for value in innerList:
    # Inner loop body
```

Also, check out using the Python range() function with a for loop

https://www.learnpython.org/en/Loops

# Problem 13: Reading CSVs

### CSV Reading Demo
"""

# Python is very famous for its extensive libraries
# In order to read csv's you can import the csv library to use csv specific functions
import csv

# the open function opens the file
with open('./sample_data/california_housing_test.csv') as file:

  reader = csv.reader(file)

  # the first row of the csv is always the header. The next() function returns the first row and then consumes it
  header = next(reader)
  print(header)
  
  # Then, you can iterate through and print out every other row with a for loop
  for row in reader:
    print(row)

# The pandas library is one of the most popular in Python and it includes a read_csv function
import pandas

# The read_csv function can take a file and return a dataframe of the csv
dataframe = pandas.read_csv('./sample_data/california_housing_test.csv')

# Dataframes are more complicated to use, but the dataframe specific functions can often allow you to solve problems easily without much code
print(dataframe)

"""### Problem:

Read the CSV named california_housing_test.csv in the sample_data folder. And print only the rows where the housing median age is below thirty but the median income is above 10.00
"""

# Your code here
import pandas
df  = pandas.read_csv("./sample_data/california_housing_test.csv")
for row in df:
    if row["housing_median_age"] < 30 and row["median_income"] > 10:
        print(row)

"""### Hint

Since the values in csv files are often interpreted as strings, you need to be able to parse a string into a different data type. Look into the int() and float() functions for parsing strings into numbers

https://www.freecodecamp.org/news/how-to-convert-strings-into-integers-in-python/

# Problem 14: Graphing Data

### Graphing Demo
"""

# the pandas library also has a read_excel() function that allows you to well, read excel files into a dataframe

import matplotlib

# This creates the figure within which to render
figure = matplotlib.pyplot.figure()

# This is a list of x values
xValues = [1,2,3,4,5,6,7,8,9,10]
# This is a list of y values
yValues = [2,4,6,8,10,12,14,16,18,20]

matplotlib.pyplot.scatter(xValues, yValues)

"""### Problem:

Create a line graph of the data in following list
"""

# Dictionary of data
# data with the key: 'x' are x values, the ones with the key 'y' are y values
import matplotlib

p14Data = [
           {'x': 2, 'y': 100},
           {'x': 3, 'y': 101},
           {'x': 5, 'y': 103},
           {'x': 7, 'y': 100},
           {'x': 9, 'y': 200},
           {'x': 10, 'y': 10},
           {'x': 14, 'y': 11},
           {'x': 16, 'y': 18},
           {'x': 17, 'y': 14},
           {'x': 19, 'y': 16},
           {'x': 20, 'y': 16},
           {'x': 21, 'y': 12},
           {'x': 24, 'y': 102},
           {'x': 25, 'y': 131},
           {'x': 26, 'y': 13},
           {'x': 27, 'y': 12.6},
           {'x': 29, 'y': 115},
           {'x': 30, 'y': 12},
           {'x': 40, 'y': 19},
]

# Your code here
xValues = [elt["x"] for elt in p14Data]
yValues = [elt["y"] for elt in p14Data]

matplotlib.pyplot.scatter(xValues, yValues)

"""### Hint:

Use a for loop to go through the data and create 2 lists, one with the x values, and the other with the y values

# Problem 15: Finding and Graphing a Data Set

### Problem:

Find your own data set (one that is neither included in the sample data provided by Google Colab nor one provided by the Data Challenge) and graph a small portion of your choosing.

You can temporarily upload your file by pressing Files>Upload in the sidebar to the left.
"""

# Your code here

"""### Hint

You can find good data on Github, Kaggle, or Google Public Data

Good Data Sources:

*   https://www.data.gov/ 
*   https://www.kaggle.com/datasets 
*   https://cloud.google.com/bigquery/public-data/ 
*   https://github.com/datasets

# Submission Link: https://forms.gle/BC4m2kEgAh48UPrV6
"""